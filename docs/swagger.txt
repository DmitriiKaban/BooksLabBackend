openapi: 3.0.4
info:
  title: Books API
  description: API for managing a personal collection of books, including authentication.
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/university-e19/Books/1.0.0
  - url: http://localhost:8016
    description: Local development server

tags:
  - name: books
    description: Operations related to books
  - name: auth
    description: Authentication operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your JWT token in the format **Bearer &lt;token&gt;**

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the book.
          example: 1
        title:
          type: string
          description: The title of the book.
          example: Ведзьмак
        author:
          type: string
          description: The author of the book.
          example: Анджей Сапковский
        year:
          type: integer
          description: The publication year of the book.
          example: 1986
        rating:
          type: number
          format: double
          description: The rating of the book.
          example: 10.0
        readYear:
          type: integer
          description: The year the book was read.
          example: 2020
        comments:
          type: string
          description: Comments about the book.
          example: классика
        image:
          type: string
          format: url
          description: URL of the book cover image.
          example: https://cdn.librarius.md/img/original/vedimak_1432886167.jpg
        genre:
          type: string
          description: The genre of the book.
          example: Fantasy

    PagedBooksResponse:
      type: object
      properties:
        books:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Book'
            pageable:
              type: object
              properties:
                pageNumber:
                  type: integer
                  example: 0
                pageSize:
                  type: integer
                  example: 30
            totalElements:
              type: integer
              example: 42
            totalPages:
              type: integer
              example: 2
            last:
              type: boolean
              example: false
            first:
              type: boolean
              example: true
            size:
              type: integer
              example: 30
            number:
              type: integer
              example: 0
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                  example: true
                sorted:
                  type: boolean
                  example: false
                unsorted:
                  type: boolean
                  example: true
            numberOfElements:
              type: integer
              example: 30
            empty:
              type: boolean
              example: false

    BookRequestWrapper:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
      required:
        - book

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: A message indicating the result of the operation.
          example: Book deleted with ID 1

    # Authentication schemas
    LoginUserDto:
      type: object
      properties:
        username:
          type: string
          description: User's username or email for login.
          example: user@example.com
        password:
          type: string
          description: User's password.
          format: password
          example: mysecretpassword
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token.
          example: eyJhbGciOiJIUzI1NiI...
        expiresIn:
          type: integer
          format: int64
          description: Token expiration time.
          example: 3600
        username:
          type: string
          description: Full name of the authenticated user.
          example: Dima Developer
      required:
        - token
        - expiresIn
        - username

# Apply security globally to all paths by default
security:
  - bearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user and get JWT token.
      operationId: loginUser
      description: Sends user credentials (username/email and password) to receive a JWT for authenticating future requests.
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: Successful authentication, returns JWT token and expiration details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - Invalid credentials provided.
      security: []  # No authentication required for login

  # Book endpoints
  /books:
    get:
      tags:
        - books
      summary: Get paginated books.
      operationId: getBooks
      description: Retrieves a paginated list of books in the collection. Requires authentication.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number (zero-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 30
          description: Number of items per page
      responses:
        '200':
          description: Paginated list of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedBooksResponse'
    post:
      tags:
        - books
      summary: Add a new book.
      operationId: addBook
      description: Adds a new book record to the collection. Requires authentication.
      requestBody:
        description: Book object wrapped in a 'book' field
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestWrapper'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request - Missing or invalid book data
    patch:
      tags:
        - books
      summary: Update an existing book.
      operationId: updateBook
      description: Updates an existing book record. Requires authentication.
      requestBody:
        description: Book object with updated fields wrapped in a 'book' field
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestWrapper'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request - Missing ID or invalid data
        '404':
          description: Book not found
  /books/{id}:
    delete:
      tags:
        - books
      summary: Delete a book
      operationId: deleteBook
      description: Deletes a book by ID. Requires authentication.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the book to delete
      responses:
        '200':
          description: Book deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Book not found